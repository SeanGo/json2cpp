{"name":"Json2cpp","tagline":"interconverting json string and c++ class(convert json string to c++ class, and convert c++ class to json string)","body":"json2cpp\r\n=======\r\n![](https://img.shields.io/badge/release-0.01-blue.svg)\r\n##A tool for Modelling JSON to C++\r\nCopyright (C) 2016, ZhengFeng Rao, NASaCJ. All rights reserved.\r\n\r\n## Build Status\r\n|Platfrom| [Linux][lin-link] |\r\n|:------:| :---------------: |\r\n|Status  |[![Build Status](https://travis-ci.org/nasacj/json2cpp.svg?branch=master)](https://travis-ci.org/nasacj/json2cpp)|\r\n[lin-link]: https://travis-ci.org/nasacj/json2cpp\r\n\r\n## Introduction\r\n[pyparsing-link]:http://pyparsing.wikispaces.com/\r\n[rapidjson-link]:https://github.com/miloyip/rapidjson\r\n[jsoncpp-link]:https://github.com/open-source-parsers/jsoncpp\r\n[python-link]:https://www.python.org/\r\n[setuptools-link]:https://pypi.python.org/pypi/setuptools\r\n\r\nJSON is a kind of **Object** notation. When programmers deal with the json strings by C++ json APIs (eg, [RapidJSON][rapidjson-link], [jsoncpp][jsoncpp-link]) they have to write codes for parsing each different Class, which there may be a lot of similar repeated API calling codes.\r\nSo json2cpp can help programmer to auto-generate the C++ codes for transferring form JSON to C++ and conversely.\r\njson2cpp is a script tool written in python language. It uses [pyparsing][pyparsing-link] to parse a Modeling file to C++ files and [RapidJSON][rapidjson-link] for C++ to parse the JSON.\r\n\r\n##Installation before use\r\n* json2cpp depends on Python and pyparsing, so make sure that [Python][python-link] has been installed on your System\r\n* For installing  [pyparsing][pyparsing-link], use \"[easy_install][setuptools-link]\" to install it through command line:\r\n``` shell\r\nuser@localhost $ sudo easy_install pyparsing\r\n```\r\n##Download & Run Sample\r\nThie simple instruction shows a common running command of json2cpp\r\n``` shell\r\ngit clone https://github.com/nasacj/json2cpp\r\ncd json2cpp\r\n./json2cpp sample.jsf test\r\ncd test/test\r\nmake & ./test\r\n```\r\n\r\n##Usage\r\nBefore use json2cpp, a definition file is required:\r\n###Define the class\r\nAs sample.jsf file shows, user can define the class structure as C++ sytle. The classes are according to the JSON objects:\r\n\r\n####Sample JSON Object for Request\r\n``` json\r\n{\r\n    \"sourceId\": 1,\r\n    \"orgId\": 10,\r\n    \"ivcType\": 100,\r\n    \"reqNo\": \"asd\",\r\n    \"payerNo\": \"10032-11\",\r\n    \"businessIds\": [\r\n        \"saddd\",\r\n        \"xxxx\"\r\n    ],\r\n    \"invoiceTicket\": {\r\n        \"invoiceType\": \"Normal\",\r\n        \"invoiceCode\": \"200001\",\r\n        \"invoiceAddress\": {\r\n            \"provinceNo\": 10001,\r\n            \"provinceStr\": \"New York\",\r\n        },\r\n        \"optionalAddress\": [\r\n            {\r\n                \"provinceNo\": 10002,\r\n                \"provinceStr\": \"Shanghi\",\r\n            },\r\n            {\r\n                \"provinceNo\": 10003,\r\n                \"provinceStr\": \"Beijing\",\r\n            }\r\n        ]\r\n    }\r\n}\r\n```\r\n####Sample JSON Object for Response:\r\n``` json\r\n{\r\n    \"code\": \"200\",\r\n    \"msg\": \"This is msg\",\r\n    \"reqNo\": \"100200012\",\r\n    \"businessIds\": [\r\n        \"111asd\",\r\n        \"2cde2\"\r\n    ],\r\n    \"invoiceTicket\": {\r\n        \"invoiceType\": \"Normal\",\r\n        \"invoiceCode\": \"200001\",\r\n        \"invoiceAddress\": {\r\n            \"provinceNo\": 10001,\r\n            \"provinceStr\": \"Shanghai\",\r\n        },\r\n        \"optionalAddress\": [\r\n            {\r\n                \"provinceNo\": 10002,\r\n                \"provinceStr\": \"Beijing\",\r\n            },\r\n            {\r\n                \"provinceNo\": 10003,\r\n                \"provinceStr\": \"Hong Kong\",\r\n            }\r\n        ]\r\n    }\r\n}\r\n```\r\n####Definitation of Class, Request and Response:\r\n``` cpp\r\n//namespace Definition\r\nnamespace jsf::test\r\n\r\n//Class Definition\r\n@description=\"Address Structure\"  //@descpription is optional\r\nclass Address\r\n{\r\n    @jsonname=\"provinceNo\", description=\"Province ID\" //@descpription is optional\r\n    int provinceNo;\t\r\n\t\r\n    @jsonname=\"provinceStr\", description=\"Province\"\r\n    string province;\r\n};\r\n//@descpription is optional\r\nclass InvoiceTicket\r\n{\r\n    @jsonname=\"invoiceType\" //@descpription is optional\r\n    string invoiceType;\r\n\t\r\n    @jsonname=\"invoiceCode\", description=\"Invoice Code\"\r\n    string invoiceCode;\r\n\r\n    @jsonname=\"invoiceAddress\", description=\"Inoice Address\"\r\n    Address address;\r\n\r\n    @jsonname=\"optionalAddress\"\r\n    vector<Address> optionalAddress; //Only use vector for list handling\r\n};\r\n\r\n//The Interface which handles the serialization of JSON\r\n@description=\"Add Invoice Interface\"\r\nInterface AddInvoice {\r\n    Request {\r\n        @jsonname=\"sourceId\", description=\"Source\"\r\n        int source;\r\n\r\n        @jsonname=\"orgId\", description=\"Organization\"\r\n        int organizationId;\r\n\r\n        @jsonname=\"ivcType\",description=\"Type\"\r\n        int invoiceType;\r\n\r\n        @jsonname=\"reqNo\", description=\"Rquest Number\"\r\n        string requestNo;\r\n\r\n        @jsonname=\"payerNo\", description=\"Payer No\"\r\n        string payNo;\r\n\r\n        @jsonname=\"receiverNo\", description=\"ReceiverNo\", optional=\"true\" //Optional member\r\n        string receiverNo ;\r\n\r\n        @jsonname=\"businessIds\", description=\"Business ID List\"\r\n        vector<string> bussinessIds;\r\n\t\t\r\n        @jsonname=\"invoiceTicket\", description=\"Invoice Ticket\"\r\n        InvoiceTicket invoiceTicket;\r\n\t};\r\n\r\n\tResponse {\r\n        @jsonname=\"code\", description=\"Return Code\"\r\n        string code;\r\n\r\n        @jsonname=\"msg\", description=\"Message\"\r\n        string message;\r\n\r\n        @jsonname=\"reqNo\", description=\"Require Number\"\r\n        string requestNo;\r\n\r\n        @jsonname=\"businessIds\", description=\"BusinessID\", optional=\"true\"\r\n        vector<string> bussinessIds ;\r\n\t\t\r\n        @jsonname=\"invoiceTicket\", description=\"Invoice Ticket\"\r\n        InvoiceTicket invoiceTicket;\r\n\t};\r\n};\r\n```\r\n###Generate the C++ Class files\r\n``` shell\r\n./json2cpp sample.jsf dir_test\r\n```\r\nCommand *json2cpp* takes 2 arguements: *{Class definitation File}* *{Directory}*\r\nOutputs in *dir_test* path is organized by the namespace defined in *sample.jsf*:\r\n``` plain\r\ndir_test\r\n├── jsf\r\n     ├── AddInvoice.h\r\n     ├── base.h\r\n     ├── macro.h\r\n     └── test\r\n          ├── AddInvoice.h *\r\n          ├── base.h\r\n          ├── macro.h\r\n          └── rapidjson\r\n                ├──\r\n                 ......\r\n```\r\nThe AddInvoice.h file is the main class file for handling serialization of Request & Response between JSON and C++ objects.\r\n\r\n###Class Usage\r\nbase.h file defines the basic object access:\r\n>* Field<>:     Every json object in interface class are all Field type. It has Get/SetVaule()\r\n>* IRequest:  *ToJson()* serialize C++ Object to JSON string\r\n>* IResponse: *FromJson()* unserialize JSON string to C++ Object\r\n\r\nAddInvoice.h: The main class *AddInvoiceRequest* and *AddInvoiceResponse* generated from *sample.jsf* inherit from IRequest and IResponse.\r\n####C++ Sample Code:\r\n``` cpp\r\n/**** Request Sample ****/\r\nAddInvoiceRequest request;\r\nAddress address;\r\nAddress address1;\r\nInvoiceTicket invoTic;\r\n\r\naddress.m_provinceNo.SetValue(10001);\r\n... //set address and address1 members\r\ninvoTic.m_invoiceType.SetValue(\"Normal\");\r\n... //set invoTic members\r\n\r\nvector<Address> v_addr;\r\nv_addr.push_back(address1);\r\ninvoTic.m_optionalAddress.SetValue(v_addr);\r\n\r\n//Set the Request values:\r\nrequest.m_source.SetValue(1);\r\nrequest.m_organizationId.SetValue(10);\r\nrequest.m_invoiceType.SetValue(100);\r\nrequest.m_requestNo.SetValue(\"asd\");\r\nrequest.m_payNo.SetValue(\"10032-11\");\r\nstd::vector<std::string> bid;\r\nbid.push_back(\"saddd\");\r\nbid.push_back(\"xxxx\");\r\nrequest.m_bussinessIds.SetValue(bid);\r\nrequest.m_invoiceTicket.SetValue(invoTic);\r\n\r\nstd::string str;\r\nstd::string error;\r\nuint32_t ret = request.ToJson(str, error);\r\nif (json2cpp::ERR_OK != ret)\r\n{\r\n    std::cout<<\"error:\"<<ret<<\", \"<<error<<std::endl;\r\n    return;\r\n}\r\n\r\n/**** Response Sample ****/\r\nifstream fin(\"json.txt\");\r\ngetline(fin,str);\r\nuint32_t status = 200;\r\nAddInvoiceResponse response;\r\nuint32_t ret = response.FromJson(str, status);\r\nif(ret != json2cpp::ERR_OK)\r\n{\r\n    std::cout<<\"error:\"<<ret<<\", \"<<response.m_JSFMessage.GetValue()<<std::endl;\r\n    return;\r\n}\r\n```\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}